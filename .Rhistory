theme_minimal() +
theme(
text = element_text(family = "Georgia"),
plot.title = element_text(face = "bold", size = 16),
legend.position = "top",
axis.ticks = element_line(colour = "grey70", size = 0.2),
panel.grid.major.y = element_line(linetype = "dashed", color = "darkgray"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank()
)
?theme
ggplot(supermarket, aes(Revenue)) +
geom_histogram(bins = 100, fill = "antiquewhite", color = "grey40")
rnorm(n = 100, min = 0, max = 10)
?rnorm
rnorm(n = 100, mean = 10, sd = 2)
hist(rnorm(n = 100, mean = 10, sd = 2))
facebook <- read.delim("data/facebook.tsv")
likes <- facebook$likes
likes
head(likes)
dim(likes)
class(likes)
x <- rnorm(n = 100, mean = 10, sd = 2)
class(x)
str(likes)
length(likes)
head(likes)
tail(likes, 20)
View(likes)
View(x)
likes[1:10]
likes[1]
likes[1:10]
likes[c(10, 13512, 3778, 59131)]
subset_vector <- c(10, 13512, 3778, 59131)
likes[subset_vector]
likes[c(10, 13512, 3778, 59131)]
viral <- likes >= 5000
viral
dull <- likes == 0
normal <- likes > 0 & likes < 5000
sum(viral)
sum(dull)
sum(normal)
sum(viral)/length(likes)
know_somebody <- likes != 0
which(viral)
likes[likes > 15000]
summary(likes)
View(facebook)
c(1:10, NA)
x <- c(1:10, NA)
mean(x)
mean(x, na.rm = T)
summary(likes)
mean(likes, na.rm = TRUE)
median(likes, na.rm = T)
sd(likes)
range(likes)
min(likes)
max(likes)
sum(fc == 0)
fc <- facebook$friend_count
summary(fc)
sum(fc == 0)
matrix(1:12, nrow = 3, ncol = 3)
m <- matrix(runif(12), nrow = 3)
class(m)
str(m)
length(m)
dim(m)
m[, 2, drop = FALSE]
m[, 2]
class(m[, 2])
class(m[, 2, drop = FALSE])
m > .5
sum(m > .5)
m[m > .5]
m[m > .5, drop = FALSE]
summary(m)
mean(m)
median(m)
mean(m[1, ])
apply(m, MARGIN = 1, FUN = mean)
summary(m)
fc <- facebook$friend_count
Q1 <- fc[fc > 4600]
Q2 <- matrix(Q1, nrow = 10)
dim(Q2)
Q2
l1 <- list(item1 = 1:3,
item2 = letters[1:5],
item3 = c(T, F, T, T),
item4 = matrix(1:9, nrow = 3))
l1
class(l1)
str(l1)
length(l1)
names(l1)
l1["item4"]
l1[["item4"]]
l1$item4
model$residuals
model <- lm(mpg ~ wt, data = mtcars)    # linear regression model
mode(model)
str(model)
names(model)
model["residuals"]
mean(model["residuals"])
fb_model <- lm(friend_count ~ gender + age, data = facebook)
facebook <- read.delim("data/facebook.tsv")
fb_model <- lm(friend_count ~ gender + age, data = facebook)
Q1 <- fb_model$residuals
summary(Q1)
?qplot
?qqplot
qqplot(Q1)
hist(Q1)
hist(log(Q1))
str(facebook)
facebook[, 2]
facebook[, "age"]
facebook[, 1:3]
facebook[, c("userid", "age", "dob_day")]
facebook[1, ]
columns <- c(2, 3, 5)
rows <- c(1:25)
facebook[rows, columns]
subset(facebook, age == 113, 1:10)
subset(facebook, gender == "male" & age > 35, likes)
rm(list = ls())
dbl_var <- c(1, 2.5, 4.5)
int_var <- c(1L, 6L, 10L)
class(dbl_var)
class(int_var)
typeof(dbl_var)
typeof(int_var)
as.double(int_var)
c(dbl_var, int_var)
x == y
x <- c(4, 4, 9, 12)
y <- c(4, 4, 9, 12.00000008)
z <- c(4, 4, 9, 12)
x == y
x != y
identical(x, z)
identical(x, y)
all.equal(x, y)
identical(x, y)
all.equal(x, y)
y <- c(4, 4, 9, 12.0008)
all.equal(x, y)         # all.equal assess near equality
round(x)
round(x, digits = 1)
round(x, digits = 2)
x <- c(1, 1.35, 1.7, 2.05, 2.4, 2.75)
round(x)
round(x, digits = 1)
ceiling(x)
floor(x)
all.equal(df$x, df$y)
df <- read.csv("data/numbers-your-turn.csv")
identical(df$x, df$y)
all.equal(df$x, df$y)
x <- round(df$x, digits = 4)
y <- round(df$y, digits = 4)
identical(x, y)
all.equal(x, y)
paste(a, b, "in R")
b <- "character strings"
a <- "learning to create"
paste(a, b, "in R")
paste(a, b, "in R", sep = "-")
paste0(a, b, "in R")
paste0("paste", "a", "string", "with", "no", "spaces")
paste("paste", "a", "string", "with", "dashes", sep = "-")
mode(a)
as.character(pi)
c(a, pi)
nchar(c1)
c1 <- "How many elements are in this string?"
c2 <- c("How", "many", "elements", "are", "in", "this", "string?")
length(c1)
length(c2)
nchar(c1)
nchar(c2)
gender <- c("male", "female", "female")
age.range <- c("18-24", "25-34", "35-44", "45-54", "55-64", "65 or Above", "Under 18")
levels <- c("Under 18", "18-24", "25-34", "35-44", "45-54", "55-64", "65 or Above")
class(gender)
factor(gender)
factor(gender, levels = c("male", "female"))
ordered(age.range)
ordered(age.range, levels = c("Under 18", "18-24", "25-34", "35-44", "45-54", "55-64", "65 or Above"))
summary(ordered(age.range, levels = c("Under 18", "18-24", "25-34", "35-44", "45-54", "55-64", "65 or Above")))
facebook <- read.delim("data/facebook.tsv")
rm(list = ls())
facebook <- read.delim("data/facebook.tsv")
levels(facebook$gender)
table(facebook$gender)
reddit <- read.csv("data/reddit.csv")
levels(reddit$income.range)
reddit$income.range <- ordered(reddit$income.range,
levels = c("Under $20,000", "$20,000 - $29,999", "$30,000 - $39,999",
"$40,000 - $49,999", "$50,000 - $69,999", "$70,000 - $99,999",
"$100,000 - $149,999", "$150,000 or more"))
table(reddit$income.range)
dates <- c("2015-07-01", "2015-08-01", "2015-09-01")
class(dates)
dates <- c("2015-07-01", "2015-08-01", "2015-09-01")
class(dates)
library(lubridate)
dates2 <- ymd(dates)
class(dates2)
dates2
full_date <- ISOdate(year = yr, month = mo, day = day)
yr <- c("2012", "2013", "2014", "2015")
mo <- c("1", "5", "7", "2")
day <- c("02", "22", "15", "28")
full_date <- ISOdate(year = yr, month = mo, day = day)
full_date
as.Date(full_date)
?ISOdate
ISOdate(year = yr, month = mo, day = day, hour = NULL)
ISOdate(year = yr, month = mo, day = day, hour = NA)
as.Date
?as.Date
year(full_date)
full_date <- as.Date(ISOdate(year = c("2012", "2013", "2014", "2015"),
month = c("1", "5", "7", "2"),
day = c("02", "22", "15", "28")))
year(full_date)
wday(full_date, label = TRUE)
mean(date)
dates <- ymd(lakers$date)
min(date)
min(dates)
mean(dates)
##################
min(dates)
max(dates)
mean(dates)
summary(dates)
as.Date(ISOdate(year = facebook$dob_year,
month = facebook$dob_month,
day = facebook$dob_day))
facebook$dob <- as.Date(ISOdate(year = facebook$dob_year,
month = facebook$dob_month,
day = facebook$dob_day))
summary(facebook$dob)
any(z)
x <- c(4, 4, 9, 12, 2, 2, 10)
y <- c(4, 5, 9, 13, 2, 1, 10)
x == y
z <- x == y
class(z)
any(z)
all(z)
which(z)
x == y
library(tidyr)
library(tidyr)
library(EDAWR)
# install.packages("EDAWR")
install.packages("EDAWR")
library(EDAWR)
cases
storms
devtools::install_github("rstudio/EDAWR")
library(EDAWR)
cases
storms
library(dplyr)
summarise(
group_by(
filter(mtcars, am == 1),
cyl
),
Avg_mpg = mean(mpg)
)
a <- filter(mtcars, am == 1)
b <- group_by(a, cyl)
c <- summarise(b, Avg_mpg = mean(mpg))
c
rm(list = ls())
a <- filter(mtcars, am == 1)
b <- group_by(a, cyl)
c <- summarise(b, Avg_mpg = mean(mpg))
c
mtcars %>%
filter(am == 1) %>%
group_by(cyl) %>%
summarise(Avg_mpg = mean(mpg))
rm(a,b,c)
expenditures <- read.csv("data/expenditures.csv")
expenditures %>% gather(Year, Costs, 2:15)
expenditures %>%
gather(Year, Costs, 2:15) %>%
separate(Year, into = c("Period", "Year"))
facebook <- read.delim("data/facebook.tsv")
facebook <- facebook %>% unite(dob, dob_year, dob_month, dob_day, sep = "-")
head(facebook)
head(facebook)[,5]
head(facebook)
head(facebook)[,1:5]
facebook2 <- facebook %>% select(userid, age, gender, friend_count)
facebook2
head(facebook2)
filter(storms, wind >= 50)
storms %>% filter(wind >= 50)
storms %>% filter(wind >= 50,
storm %in% c("Alberto", "Alex", "Allison"))
facebook %>%
select(gender, age, friend_count) %>%
group_by(gender) %>%
summarise_each(funs(mean, median))
facebook %>%
group_by(age) %>%
summarise(friend_count = median(friend_count, na.rm = TRUE)) %>%
arrange(desc(friend_count))
facebook %>%
mutate(friend_ratio = friendships_initiated / friend_count) %>%
group_by(gender) %>%
summarise(fr_median = median(friend_ratio, na.rm = TRUE))
reddit <- read.csv("data/reddit.csv", stringsAsFactors = FALSE)
regions <- read.csv("data/regions.csv", stringsAsFactors = FALSE)
reddit <- reddit %>% left_join(regions)
head(reddit)
reddit <- read.csv("data/reddit.csv")
regions <- read.csv("data/regions.csv")
reddit <- reddit %>% left_join(regions)
head(reddit)
rm(list = ls())
facebook <- read.delim("data/facebook.tsv")
library(readxl)
reddit <- read.csv("data/facebook.csv")
reddit <- read.csv("data/reddit.csv")
race <- read.csv("data/race-comparison.csv")
head(race)
read_excel("data/Supermarket Transaction.xlsx", sheet = "Data")
read_excel("data/Supermarket Transactions.xlsx", sheet = "Data")
hist(facebook$tenure, breaks = 100, col = "grey",
main = "Facebook User Tenure", xlab = "Tenure (Days)")
d <- density(facebook$tenure, na.rm = TRUE)
plot(d)
polygon(d)
polygon(d, col = "red", border = "blue")
plot(d)
polygon(d, col = "red", border = "blue")
boxplot(facebook$tenure, horizontal = TRUE)
boxplot(facebook$tenure, horizontal = TRUE, notch = TRUE, col = "grey40")
boxplot(mtcars$mpg, horizontal = TRUE, notch = TRUE, col = "grey40")
boxplot(mtcars$mpg, notch = TRUE)
points(mean(mtcars$mpg), pch=18, col = "red")
par(las = 1)
barplot(pets, main = "Reddit User Animal Preferences", horiz = TRUE,
names.arg = c("Cats", "Dogs", "Turtles"), col = 'cyan')
table(reddit$dog.cat)
barplot(table(reddit$dog.cat))
par(las = 1)
barplot(pets, main = "Reddit User Animal Preferences", horiz = TRUE,
names.arg = c("Cats", "Dogs", "Turtles"), col = 'cyan')
pets <- table(reddit$dog.cat)
par(las = 1)
barplot(pets, main = "Reddit User Animal Preferences", horiz = TRUE,
names.arg = c("Cats", "Dogs", "Turtles"), col = 'cyan')
state <- reddit %>%
group_by(state) %>%
tally() %>%
arrange(n) %>%
filter(state != "")
barplot(state, main = "Reddit User Animal Preferences", horiz = TRUE)
state
pets
?barplot
par(mar = c(3,8,1,1), las = 1)
barplot(state$n, names.arg = state$state, horiz = TRUE)
dotchart(state$n,labels = state$state, cex = .7)
supermarket %>%
group_by(`Purchase Date`) %>%
summarise(Revenue = sum(Revenue, na.rm = TRUE))
supermarket <- read_excel("data/Supermarket Transactions.xlsx", sheet = "Data")
supermarket %>%
group_by(`Purchase Date`) %>%
summarise(Revenue = sum(Revenue, na.rm = TRUE))
library(ggplot2)
library(readxl)
library(dplyr)
supermarket <- read_excel("data/Supermarket Transactions.xlsx", sheet = "Data")
facebook <- read.delim("data/facebook.tsv")
reddit <- read.csv("data/reddit.csv")
race <- read.csv("data/race-comparison.csv")
mpg
ggplot(data = mpg, aes(x = displ, y = hwy))
?geom_histogram
ggplot(data = mpg, aes(x = hwy)) +
geom_histogram()
ggplot(data = mpg, aes(x = hwy)) +
geom_freqpoly()
ggplot(data = supermarket, aes(x = Revenue)) +
geom_density()
ggplot(data = supermarket, aes(x = Revenue)) +
geom_freqpoly(bins = 100, color = "blue")
ggplot(data = supermarket, aes(x = Revenue)) +
geom_density(fill = "red", alpha = .5)
ggplot(data = supermarket, aes(x = `Product Family`)) +
geom_bar()
ggplot(supermarket, aes(factor(Children), Revenue)) +
geom_violin()
supermarket %>%
group_by(`Product Family`) %>%
summarise(Revenue = sum(Revenue, na.rm = TRUE))
prod_revenue <- supermarket %>%
group_by(`Product Family`) %>%
summarise(Revenue = sum(Revenue, na.rm = TRUE))
ggplot(prod_revenue, aes(x = `Product Family`, y = Revenue)) +
geom_bar()
ggplot(supermarket, aes(`Purchase Date`, Revenue, color = Country)) +
geom_point()
ggplot(supermarket, aes(`Purchase Date`, Revenue, shape = Country)) +
geom_point()
ggplot(supermarket, aes(`Purchase Date`, Revenue, shape = Country, color = Country)) +
geom_point()
ggplot(supermarket, aes(`Purchase Date`, Revenue, size = Country)) +
geom_point()
prod_revenue <- supermarket %>%
group_by(`Purchase Date`, `Product Family`) %>%
summarise(Revenue = sum(Revenue, na.rm = TRUE))
ggplot(prod_revenue, aes(`Purchase Date`, Revenue, color = `Product Family`)) +
geom_line(alpha = .2) +
geom_smooth(se = FALSE, span = .1)
ggplot(prod_revenue, aes(`Purchase Date`, Revenue, linetype = `Product Family`)) +
geom_line(alpha = .2) +
geom_smooth(se = FALSE, span = .1)
ggplot(prod_revenue, aes(`Purchase Date`, Revenue)) +
geom_line(alpha = .2) +
geom_smooth(se = FALSE, span = .1)
supermarket %>%
group_by(`Purchase Date`, `Product Family`) %>%
summarise(Revenue = sum(Revenue, na.rm = TRUE))
ggplot(prod_revenue, aes(`Purchase Date`, Revenue, color = 'Product Family')) +
geom_line(alpha = .2) +
geom_smooth(se = FALSE, span = .1)
prod_revenue <- supermarket %>%
group_by(`Purchase Date`, `Product Family`) %>%
summarise(Revenue = sum(Revenue, na.rm = TRUE))
ggplot(prod_revenue, aes(`Purchase Date`, Revenue, color = 'Product Family')) +
geom_line(alpha = .2) +
geom_smooth(se = FALSE, span = .1)
supermarket %>%
group_by(`Purchase Date`, `Product Family`) %>%
summarise(Revenue = sum(Revenue, na.rm = TRUE))
prod_revenue <- supermarket %>%
group_by(`Purchase Date`, `Product Family`) %>%
summarise(Revenue = sum(Revenue, na.rm = TRUE))
ggplot(prod_revenue, aes(`Purchase Date`, Revenue, color = 'Product Family')) +
geom_line(alpha = .2) +
geom_smooth(se = FALSE, span = .1)
ggplot(prod_revenue, aes(`Purchase Date`, Revenue, color = `Product Family`)) +
geom_line(alpha = .2) +
geom_smooth(se = FALSE, span = .1)
ggplot(prod_revenue, aes(`Purchase Date`, Revenue)) +
geom_line(alpha = .2) +
geom_smooth(se = FALSE, span = .1)
ggplot(prod_revenue, aes(`Purchase Date`, Revenue)) +
geom_line(alpha = .2) +
geom_smooth(se = FALSE, span = .1) +
facet_wrap(~ `Product Family`)
ggplot(prod_revenue, aes(`Purchase Date`, Revenue, color = `Product Family`)) +
geom_line(alpha = .2) +
geom_smooth(se = FALSE, span = .1) +
facet_wrap(~ `Product Family`)
mpg
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(~ class
)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_grid(.~ class)
ggplot(prod_revenue, aes(`Purchase Date`, Revenue)) +
geom_line(alpha = .2) +
geom_smooth(se = FALSE, span = .1) +
facet_wrap(~ `Product Family`)
ggplot(prod_revenue, aes(`Purchase Date`, Revenue)) +
geom_line(alpha = .2) +
geom_smooth(se = FALSE, span = .1) +
facet_grid(Gender ~ `Product Family`)
prod_revenue
mpg
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_grid(trans ~ class)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_grid(cyl ~ class)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_grid(class ~ cyl)
?scale
ggplot(prod_revenue, aes(`Purchase Date`, Revenue, color = `Product Family`)) +
geom_line(alpha = .2) +
geom_smooth(se = FALSE, span = .1) +
labs(x = "x-axis title", y = "y-axis title",
color = "legend title", title = "Main title")
basic <- ggplot(prod_revenue, aes(`Purchase Date`, Revenue, color = `Product Family`)) +
geom_line(alpha = .2) +
geom_smooth(se = FALSE, span = .1) +
scale_y_continuous(labels = scales::dollar) +
labs(x = NULL, color = NULL, y = NULL, title = "Total Historical Revenue by Product Family")
basic
