{
    "collab_server" : "",
    "contents" : "# Session 8: Advanced Graphics with ggplot\n\n########\n# GR&A #\n########\n# packages used\nlibrary(ggplot2)\nlibrary(readxl)\nlibrary(dplyr)\n\n# data used\nsupermarket <- read_excel(\"data/Supermarket Transactions.xlsx\", sheet = \"Data\")\nfacebook <- read.delim(\"data/facebook.tsv\")\nreddit <- read.csv(\"data/reddit.csv\")\nrace <- read.csv(\"data/race-comparison.csv\")\nmpg\n\n\n###############\n# First Layer #\n###############\n# blank canvas\nggplot(data = supermarket)\n\n# map variables to coordinates\nggplot(data = mpg, aes(x = displ, y = hwy))\nggplot(mpg, aes(displ, hwy))\n\n\n########################## UNIVARIATE GEOMS ##########################\n\n##################################################\n# Histogram, Frequency Polygons & Denisity Plots #\n##################################################\n\n# default\nggplot(data = mpg, aes(x = hwy)) +\n        geom_histogram()\n\nggplot(data = mpg, aes(x = hwy)) +\n        geom_freqpoly()\n\nggplot(data = supermarket, aes(x = Revenue)) +\n        geom_density()\n\n# adjust aesthetics\nggplot(data = supermarket, aes(x = Revenue)) +\n        geom_histogram(bins = 100, color = \"grey40\", fill = \"white\")\n\nggplot(data = supermarket, aes(x = Revenue)) +\n        geom_freqpoly(bins = 100, color = \"blue\")\n\nggplot(data = supermarket, aes(x = Revenue)) +\n        geom_density(fill = \"red\", alpha = .5)\n\n\n#############\n# Bar chart #\n#############\n\n# default bar chart tallies counts for each variable\nggplot(data = supermarket, aes(x = `Product Family`)) +\n        geom_bar()\n\n# change stat = \"identity\" to plot data already tallied\nsummary <- supermarket %>%\n        group_by(`Product Family`) %>%\n        tally()\n\nggplot(data = summary, aes(x = `Product Family`, y = n)) +\n        geom_bar(stat = \"identity\")\n\n\n# adjust aesthetics\nggplot(data = supermarket, aes(x = `Product Family`)) +\n        geom_bar(fill = \"dodgerblue\", color = \"grey40\")\n\nggplot(data = supermarket, aes(x = `Product Family`)) +\n        geom_bar(fill = \"dodgerblue\", color = \"grey40\", width = .75)\n\nggplot(data = supermarket, aes(x = `Product Family`)) +\n        geom_bar(fill = \"dodgerblue\", color = \"grey40\", width = .99)\n\n\n\n#############\n# Your Turn #\n#############\n\n# 1. Assess the distribution of age, tenure, and gender in the facebook data.\n\n\n\n# 2. Assess the frequency of age range, education, and income range in the reddit data.\n\n\n########################## BIIVARIATE GEOMS ##########################\n\n#################\n# Scatter Plots #\n#################\n\n# add geom_point for a scatter plot\nggplot(supermarket, aes(`Purchase Date`, Revenue)) +\n        geom_point()\n\nggplot(supermarket, aes(`Purchase Date`, Revenue)) +\n        geom_point(colour = \"blue\", size = 1, shape = 5)\n\nggplot(supermarket, aes(`Purchase Date`, Revenue)) +\n        geom_point(colour = \"blue\", alpha = .25)\n\n\n# use jitter to resolve overplotting issues\nggplot(supermarket, aes(factor(`Units Sold`), Revenue)) +\n        geom_point()\n\nggplot(supermarket, aes(factor(`Units Sold`), Revenue)) +\n        geom_jitter(size = 1)\n\nggplot(supermarket, aes(factor(`Units Sold`), Revenue)) +\n        geom_jitter(size = 1, alpha = .1)\n\n\n\n###############\n# Line Charts #\n###############\n# create total sales by date\nsales_by_date <- supermarket %>%\n        group_by(`Purchase Date`) %>%\n        summarise(Revenue = sum(Revenue, na.rm = TRUE))\n\nsales_plot <- ggplot(sales_by_date, aes(`Purchase Date`, Revenue)) +\n        geom_line()\n\nsales_plot + geom_smooth(span = .1)\nsales_plot + geom_smooth(span = .9, se = FALSE)\nsales_plot + geom_smooth(method = \"lm\", se = FALSE)\n\n\n\n############\n# Box Plot #\n############\nggplot(supermarket, aes(factor(Children), Revenue)) +\n        geom_boxplot()\n\nggplot(supermarket, aes(factor(Children), Revenue)) +\n        geom_boxplot(notch = TRUE, fill = \"blue\", alpha = .25)\n\nggplot(supermarket, aes(factor(Children), Revenue)) +\n        geom_boxplot(outlier.color = \"red\", outlier.shape = 1)\n\n\n# over-plotting on boxplots can be uesful for smaller data sets\nggplot(mpg, aes(class, hwy)) +\n        geom_boxplot()\n\nggplot(mpg, aes(class, hwy)) +\n        geom_boxplot() +\n        geom_jitter(width = .2, alpha = .5)\n\nggplot(mpg, aes(class, hwy)) +\n        geom_violin()\n\n\n\n#############\n# Bar Chart #\n#############\n\n# default bar chart plots counts\nggplot(supermarket, aes(x = `Product Family`)) +\n        geom_bar()\n\n# plot a 2nd variable on the y-axis for bar charts\nprod_revenue <- supermarket %>%\n        group_by(`Product Family`) %>%\n        summarise(Revenue = sum(Revenue, na.rm = TRUE))\n\nggplot(prod_revenue, aes(x = `Product Family`, y = Revenue)) +\n        geom_bar(stat = \"identity\")\n\n\n\n\n#############\n# Your Turn #\n#############\n\n# Assess bivariate relationships between tenure, age, gender, likes, etc. in \n# the facebook data.\n\n\n\n########################## MULTIVARIATE CAPABILITIES ##########################\n\n############################\n# Color, Size, Shape, etc. #\n############################\n\n# We can add color, size, shape parameters in aes() to add another variable\nggplot(supermarket, aes(Revenue, color = `Product Family`)) +\n        geom_freqpoly()\n\nggplot(data = supermarket, aes(`Product Family`, fill = Gender)) +\n        geom_bar(position = \"dodge\")\n\nggplot(supermarket, aes(`Purchase Date`, Revenue, color = Country)) +\n        geom_point()\n\n# likewise for line charts; here is data that represents total revenue by date\n# for each product family (i.e. food, drink, non-consumable)\nprod_revenue <- supermarket %>%\n        group_by(`Purchase Date`, `Product Family`) %>%\n        summarise(Revenue = sum(Revenue, na.rm = TRUE))\n\nggplot(prod_revenue, aes(`Purchase Date`, Revenue, color = `Product Family`)) +\n        geom_line(alpha = .2) +\n        geom_smooth(se = FALSE, span = .1)\n\n\n#############\n# Facetting #\n#############\n\n# another option is to produce \"small multiples\"\nggplot(prod_revenue, aes(`Purchase Date`, Revenue)) +\n        geom_line(alpha = .2) +\n        geom_smooth(se = FALSE, span = .1) +\n        facet_wrap(~ `Product Family`)\n\n\n# difference between facet_wrap and facet grid\nggplot(mpg, aes(displ, hwy)) +\n        geom_point() + \n        facet_wrap(~ class)\n\nggplot(mpg, aes(displ, hwy)) +\n        geom_point() + \n        facet_grid(cyl ~ class)\n\nggplot(mpg, aes(displ, hwy)) +\n        geom_point() + \n        facet_grid(class ~ cyl)\n\n\n\n\n#############\n# Your Turn #\n#############\n\n# Use color, shape, size, and facetting to assess multivariate relationships \n# between tenure, age, gender, likes, etc. in the facebook data.\n\n\n\n\n\n########################## Visualization Aesthetics ##########################\n\n##########################\n# Scales, Axes & Legends #\n##########################\n\n# consider this basic histogram\np <- ggplot(supermarket, aes(Revenue)) +\n        geom_histogram(bins = 100, color = \"grey40\", fill = \"white\")\n\n# we can control axis parameters with scale_\np + scale_x_continuous(name = \"Revenue from Individual Transactions\",\n                       limits = c(10, 50),\n                       breaks = seq(10, 50, by = 10),\n                       labels = scales::dollar)\n\np + scale_x_log10(labels = scales::dollar)\n\n\n# we can also use the xlim, ylim, and lim shorthand functions; add parameters\n# below to adjust the limits\np + xlim(25, 55)\np + ylim(0, 400)\np + lims(x = c(0, 100), y = c(0, 1000))\n\n\n# or we can use coord_ to adjust coordinates without impacting underlying data\np + coord_cartesian(xlim = c(10, 50), ylim = c(0, 400))\np + coord_flip()\n\n\n# we can also use labs, xlab, ylab, & ggtitle for shorthand labeling; add\n# titles to the parameters in the labs() function below\nggplot(prod_revenue, aes(`Purchase Date`, Revenue, color = `Product Family`)) +\n        geom_line(alpha = .2) +\n        geom_smooth(se = FALSE, span = .1) +\n        labs(x = \"x-axis title\", y = \"y-axis title\", \n             color = \"legend title\", title = \"Main title\")\n\n\n# Legend features can be controlled with guides and positioning is \n# controlled within theme\nggplot(supermarket, aes(`Purchase Date`, Revenue, color = Country)) +\n        geom_point(alpha = .2) +\n        guides(color = guide_legend(override.aes = list(alpha = 1), reverse = TRUE)) +\n        theme(legend.position = \"bottom\")\n\n\n\n\n#############\n# Your Turn #\n#############\n\n# Try to re-create displayed visualization as close as possible\n\n\n\n\n\n##########\n# Themes #\n##########\n\n# Several theme options are available (even more in the ggthemes package)\np <- ggplot(supermarket, aes(Revenue)) +\n        geom_histogram(bins = 100, fill = \"antiquewhite\", color = \"grey40\")\n\np + theme_classic()\np + theme_minimal()\np + theme_dark()\n\n# add some parameters to the theme() function to adjust how the graphic looks\nbasic + theme_minimal() +\n        theme(\n                text = element_text(family = \"Georgia\"),\n                plot.title = element_text(face = \"bold\", size = 16), \n                legend.position = \"top\",\n                axis.ticks = element_line(colour = \"grey70\", size = 0.2),\n                panel.grid.major.y = element_line(linetype = \"dashed\", color = \"darkgray\"),\n                panel.grid.major.x = element_blank(),\n                panel.grid.minor = element_blank()\n        )\n\n\n\n#############\n# Your Turn #\n#############\n\n# Using this base plot practice adjusting theme parameters.\n\nggplot(supermarket, aes(Revenue)) +\n        geom_histogram(bins = 100, fill = \"antiquewhite\", color = \"grey40\")\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1469801491960.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "72123415",
    "id" : "C069DAB8",
    "lastKnownWriteTime" : 1469817692,
    "last_content_update" : 1469817692606,
    "path" : "~/Dropbox/Academia/University of Cincinnati/Intro to R Bootcamp/Files - teacher/8-ggplot-teacher.R",
    "project_path" : "Files - teacher/8-ggplot-teacher.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}